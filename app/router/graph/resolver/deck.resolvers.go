package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/RyoheiTomiyama/phraze-api/domain"
	"github.com/RyoheiTomiyama/phraze-api/router/graph/model"
	"github.com/RyoheiTomiyama/phraze-api/util/errutil"
)

// CreateDeck is the resolver for the createDeck field.
func (r *mutationResolver) CreateDeck(ctx context.Context, input model.CreateDeckInput) (*model.Deck, error) {
	deck := &domain.Deck{
		Name: input.Name,
	}
	deck, err := r.deckUsecase.CreateDeck(ctx, deck)
	if err != nil {
		return nil, errutil.Wrap(err)
	}

	var m model.Deck
	if err = model.FromDomain(ctx, deck, &m); err != nil {
		return nil, errutil.Wrap(err)
	}

	return &m, nil
}

// Decks is the resolver for the decks field.
func (r *queryResolver) Decks(ctx context.Context) ([]*model.Deck, error) {
	decks, err := r.deckUsecase.GetDecks(ctx)
	if err != nil {
		return nil, errutil.Wrap(err)
	}

	var dd []*model.Deck
	for _, item := range decks {
		var m model.Deck
		if err = model.FromDomain(ctx, item, &m); err != nil {
			return nil, errutil.Wrap(err)
		}

		dd = append(dd, &m)
	}

	return dd, nil
}

// Deck is the resolver for the deck field.
func (r *queryResolver) Deck(ctx context.Context, id int64) (*model.Deck, error) {
	deck, err := r.deckUsecase.GetDeck(ctx, id)
	if err != nil {
		return nil, errutil.Wrap(err)
	}

	if deck == nil {
		return nil, errutil.New(errutil.CodeNotFound, "Deck not found")
	}

	var m model.Deck
	if err = model.FromDomain(ctx, deck, &m); err != nil {
		return nil, errutil.Wrap(err)
	}

	return &m, nil
}
